Pros:
- more robust
- easily spot bugs
- predictability
- readability (especially when working in a team)
- popular

Cons:
- more code to write
- more to learn
- required compilation (usually setup already with create-react-app)
- not true static typing

Bottom Line:
Best to use in large projects with multiple developers

Notes:
- Uses .ts and .tsx extension

Installation:
- npm i -g typescript
- tsc -v (check version)

Folder Structure:
- src file with tsc files
- dist file with js files

https://www.youtube.com/watch?v=BCg4U1FzODs

Basic Prop Types Examples#
A list of TypeScript types you will likely use in a React+TypeScript app:

Copy
type AppProps = {
  message: string;
  count: number;
  disabled: boolean;
  /** array of a type! */
  names: string[];
  /** string literals to specify exact string values, with a union type to join them together */
  status: "waiting" | "success";
  /** any object as long as you dont use its properties (NOT COMMON but useful as placeholder) */
  obj: object;
  obj2: {}; // almost the same as `object`, exactly the same as `Object`
  /** an object with any number of properties (PREFERRED) */
  obj3: {
    id: string;
    title: string;
  };
  /** array of objects! (common) */
  objArr: {
    id: string;
    title: string;
  }[];
  /** a dict object with any number of properties of the same type */
  dict1: {
    [key: string]: MyTypeHere;
  };
  dict2: Record<string, MyTypeHere>; // equivalent to dict1
  /** any function as long as you don't invoke it (not recommended) */
  onSomething: Function;
  /** function that doesn't take or return anything (VERY COMMON) */
  onClick: () => void;
  /** function with named prop (VERY COMMON) */
  onChange: (id: number) => void;
  /** alternative function type syntax that takes an event (VERY COMMON) */
  onClick(event: React.MouseEvent<HTMLButtonElement>): void;
  /** an optional prop (VERY COMMON!) */
  optional?: OptionalType;
};